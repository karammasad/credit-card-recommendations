Here is the user's financial information:
```json
{user_info}
```

Here is the user's transaction history:
```json
{transactions}
```

Here is our database of credit card information:
```json
{credit_cards}
```

Please recommend up to 4 credit cards that maximize the savings/value across all categories. Assume the user will use all the cards you recommend, so they cannot be redundant. Ensure that you only recommend cards that the user meets the minimum credit score requirement for.

Follow this reasoning process to generate your response:
1. **Step-by-Step Reasoning**: Begin by analyzing the userâ€™s financial profile and spending patterns, considering factors like lifestyle, spending habits, credit score, and long-term card value. Mention key factors that influence credit card selection.
2. **Rationale for Rankings**: Discuss the logic behind why certain cards are ranked higher or lower based on the user's needs, approval odds, potential value, and card benefits.

Format your answer using the following pydantic models:

```python
class UserInfo(BaseModel):
    global_reasoning: str  # An overview of the factors considered for all recommendations
    recommendations: list[CreditCardRec]  # A list of credit card recommendations

class CreditCardRec(BaseModel):
    rec_reasoning: str  # Explanation for recommending this specific card
    card_name: str  # Name of the credit card being recommended
```

### Output Format
- `UserInfo.global_reasoning`: A paragraph summarizing key factors considered across all cards.
- `UserInfo.recommendations`: A list of `CreditCardRec` objects, each containing:
    - `rec_reasoning`: Step-by-step reasoning for why this specific card was chosen.
    - `card_name`: Name of the credit card.

Please use this structured format in your response.